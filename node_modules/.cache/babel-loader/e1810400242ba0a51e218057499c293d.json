{"remainingRequest":"/Users/liuyitian/Downloads/silver-ant-ui/node_modules/babel-loader/lib/index.js!/Users/liuyitian/Downloads/silver-ant-ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/liuyitian/Downloads/silver-ant-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuyitian/Downloads/silver-ant-ui/node_modules/vue-task-node/src/lib/components/port/inport.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liuyitian/Downloads/silver-ant-ui/node_modules/vue-task-node/src/lib/components/port/inport.vue","mtime":499162500000},{"path":"/Users/liuyitian/Downloads/silver-ant-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuyitian/Downloads/silver-ant-ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/liuyitian/Downloads/silver-ant-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuyitian/Downloads/silver-ant-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\nconst prefixCls = 'task-port';\nexport default {\n  name: 'InPort',\n\n  data() {\n    return {\n      className: null\n    };\n  },\n\n  props: {\n    pid: [Number, String],\n    content: {\n      type: [String, Number],\n      default: '输入'\n    },\n    isConnected: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    classes() {\n      return [`${prefixCls}`, `${prefixCls}-in`];\n    },\n\n    magnetCls() {\n      return [`${prefixCls}-magnet`];\n    },\n\n    isCls() {\n      return [`${prefixCls}`, `${prefixCls}-in`, `is-connected`];\n    }\n\n  },\n  methods: {\n    inDropPort: function (event) {\n      if (this.className) {\n        let _this = event.target.parentNode;\n        _this.className = this.className;\n      }\n\n      let startData = event.dataTransfer.getData('portStart');\n\n      if (startData) {\n        this.$emit('on-add-path', event, startData, this.pid);\n      }\n    },\n    dragPortOver: function (event) {},\n    dragEnter: function (event) {\n      let _this = event.target.parentNode;\n      this.className = _this.className;\n      _this.className = 'task-port task-in-out';\n    },\n    dragLeave: function (event) {\n      let _this = event.target.parentNode;\n      _this.className = this.className;\n    }\n  }\n};",{"version":3,"sources":["inport.vue"],"names":[],"mappings":";;;;;AAOA,MAAA,SAAA,GAAA,WAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,QADA;;AAEA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,SAAA,EAAA;AADA,KAAA;AAGA,GANA;;AAOA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CADA;AAEA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAFA;AAMA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AANA,GAPA;AAkBA,EAAA,QAAA,EAAA;AACA,IAAA,OAAA,GAAA;AACA,aAAA,CACA,GAAA,SAAA,EADA,EAEA,GAAA,SAAA,KAFA,CAAA;AAIA,KANA;;AAOA,IAAA,SAAA,GAAA;AACA,aAAA,CACA,GAAA,SAAA,SADA,CAAA;AAGA,KAXA;;AAYA,IAAA,KAAA,GAAA;AACA,aAAA,CACA,GAAA,SAAA,EADA,EAEA,GAAA,SAAA,KAFA,EAGA,cAHA,CAAA;AAKA;;AAlBA,GAlBA;AAsCA,EAAA,OAAA,EAAA;AACA,IAAA,UAAA,EAAA,UAAA,KAAA,EAAA;AACA,UAAA,KAAA,SAAA,EAAA;AACA,YAAA,KAAA,GAAA,KAAA,CAAA,MAAA,CAAA,UAAA;AACA,QAAA,KAAA,CAAA,SAAA,GAAA,KAAA,SAAA;AACA;;AACA,UAAA,SAAA,GAAA,KAAA,CAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA;;AACA,UAAA,SAAA,EAAA;AACA,aAAA,KAAA,CAAA,aAAA,EAAA,KAAA,EAAA,SAAA,EAAA,KAAA,GAAA;AACA;AACA,KAVA;AAWA,IAAA,YAAA,EAAA,UAAA,KAAA,EAAA,CACA,CAZA;AAaA,IAAA,SAAA,EAAA,UAAA,KAAA,EAAA;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,MAAA,CAAA,UAAA;AACA,WAAA,SAAA,GAAA,KAAA,CAAA,SAAA;AACA,MAAA,KAAA,CAAA,SAAA,GAAA,uBAAA;AACA,KAjBA;AAkBA,IAAA,SAAA,EAAA,UAAA,KAAA,EAAA;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,MAAA,CAAA,UAAA;AACA,MAAA,KAAA,CAAA,SAAA,GAAA,KAAA,SAAA;AACA;AArBA;AAtCA,CAAA","sourcesContent":["<template>\n  <div :class=\"[isConnected ? isCls:classes]\" :id=\"pid\" @dragover.prevent=dragPortOver($event) @drop.prevent='inDropPort($event)' @dragenter=\"dragEnter\" @dragleave=\"dragLeave\">\n      <span :class=\"magnetCls\"></span>\n  </div>\n</template>\n<script>\n\nconst prefixCls = 'task-port'\nexport default {\n  name: 'InPort',\n  data () {\n    return {\n      className: null\n    }\n  },\n  props: {\n    pid: [Number, String],\n    content: {\n      type: [String, Number],\n      default: '输入'\n    },\n    isConnected: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    classes () {\n      return [\n        `${prefixCls}`,\n        `${prefixCls}-in`\n      ]\n    },\n    magnetCls () {\n      return [\n        `${prefixCls}-magnet`\n      ]\n    },\n    isCls () {\n      return [\n        `${prefixCls}`,\n        `${prefixCls}-in`,\n        `is-connected`\n      ]\n    }\n  },\n  methods: {\n    inDropPort: function (event) {\n      if (this.className) {\n        let _this = event.target.parentNode\n        _this.className = this.className\n      }\n      let startData = event.dataTransfer.getData('portStart')\n      if (startData) {\n        this.$emit('on-add-path', event, startData, this.pid)\n      }\n    },\n    dragPortOver: function (event) {\n    },\n    dragEnter: function (event) {\n      let _this = event.target.parentNode\n      this.className = _this.className\n      _this.className = 'task-port task-in-out'\n    },\n    dragLeave: function (event) {\n      let _this = event.target.parentNode\n      _this.className = this.className\n    }\n  }\n}\n</script>\n"],"sourceRoot":"node_modules/vue-task-node/src/lib/components/port"}]}